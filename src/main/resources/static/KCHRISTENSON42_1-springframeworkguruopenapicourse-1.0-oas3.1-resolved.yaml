openapi: "3.1.0"
info:
  version: "1.0-oas3.1"
  title: "Spring Framework Guru OpenAPI Course"
  description: "For Udemy course about OpenAPI by John Thompson"
  contact:
    name: "John Thompson"
    url: "https://springframework.guru"
    email: "jt@aol.com"
  license:
    name: "Apache 2.0"
    url: "https://www.apache.org/licenses/LICENSE-2.0.html"
  termsOfService: "http://example.com/terms"
servers:
  - url: "https://dev.example.com"
    description: "Development Server"
  - url: "https://qa.example.com"
    description: "QA Server"
  - url: "https://prod.example.com"
    description: "Production Server"
# paths is required for openapi object, use {} as a placeholder
paths:
  # must begin with /
  /v1/customers:
    get:
      description: "Returns all customers."
      responses:
        '200':
          description: "List of Customers"
          content:
            application/json:
              schema:
                type: array
                # see JSON Schema https://json-schema.org/understanding-json-schema/reference/array#length
                minItems: 1
                maxItems: 100
                items:
                  type: object
                  description: "Customer object"
                  properties:
                    id:
                      type: string
                      format: uuid
                    firstName:
                      type: string
                      minLength: 1
                      maxLength: 25
                      examples:
                        - "Fred"
                    lastName:
                      type: string
                      minLength: 1
                      maxLength: 25
                      # example is deprecated
                      examples:
                        - "Flintstone"
                    address:
                      type: object
                      description: "Address object"
                      properties:
                        line1:
                          type: string
                          examples:
                            - "123 Stone"
                        city:
                          type: string
                          examples:
                            - "Bedrock"
                        statecode:
                          type: string
                          minLength: 2
                          maxLength: 2
                          description: "Two letter state code"
                          enum:
                            - "AL"
                            - "HI"
                            - "MN"
                            - "ND"
                            - "SD"
                          # this works too
                          # enum: ["IA", "WI"]
                          examples:
                            - "MN"
                        zipcode:
                          type: string
                          # must use single quote for regex pattern
                          pattern: '^\d{5}(?:[-]\d{4})?$'
                          examples:
                            - "90210"
                            - "90210-1234"
        '404' :
          description: "On no! We have no customers. This isn't Cheers."
  /v1/beers:
    get:
      description: "Returns all beers if they exist; otherwise, return not found."
      responses:
        '200':
          description: "List of Beers"
          content:
            application/json:
              schema:
                type: array
                minItems: 1
                maxItems: 10
                items:
                  type: object
                  description: "Beer object"
                  properties:
                    name:
                      type: string
                      examples:
                        - "Black Label"
                    style:
                      enum: ["ALE", "PALE_ALE", "IPA", "WHEAT", "LAGER"]
                    upc:
                      type: string
                      pattern: '\d{13}'
                      minLength: 13
                      maxLength: 13
                    price:
                      type: number
                      format: float
                      examples:
                        - 2.99
                    quantity:
                      type: integer
                      format: int32
                    brewery:
                      type: object
                      description: "Brewery object"
                      properties:
                        name:
                          type: string
                          minLength: 1
                          maxLength: 25
                          examples:
                            - "Hamm's"
                        location:
                          type: object
                          description: "Location object"
                          properties:
                            line1:
                              type: string
                              examples:
                                - "123 Stone"
                            city:
                              type: string
                              minLength: 1
                              maxLength: 100
                              examples:
                                - "Zap"
                            statecode:
                              type: string
                              minLength: 2
                              maxLength: 2
                              description: "Two letter state code"
                              default: "MN"
                              enum:
                                - "AL"
                                - "HI"
                                - "MN"
                                - "ND"
                                - "SD"
                              examples:
                                - "ND"
                            zipcode:
                              type: string
                              # must use single quote for regex pattern
                              pattern: '^\d{5}(?:[-]\d{4})?$'
                              examples:
                                - "58580"
        '404':
          description: "Oh no! We're all out of beer! \u2639"
  /v1/nachos:
    get:
      description: "Get some nachos."
      # use of deprecated field
      deprecated: true
      responses:
        '404':
          description: "We don't serve nachos anymore."
components: {}