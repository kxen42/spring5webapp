openapi: 3.1.0
info:
  version: 1.0-oas3.1
  title: Spring Framework Guru OpenAPI Course
  description: For Udemy course about OpenAPI by John Thompson
  contact:
    name: John Thompson
    url: 'https://springframework.guru'
    email: jt@aol.com
  license:
    name: Apache 2.0
    url: 'https://www.apache.org/licenses/LICENSE-2.0.html'
  termsOfService: 'https://example.com/terms'
servers:
  - url: 'https://dev.example.com'
    description: Development Server
  - url: 'https://qa.example.com'
    description: QA Server
  - url: 'https://prod.example.com'
    description: Production Server
paths:
  /v1/customers:
    get:
      summary: Get all customers.
      description: Get all Customers for optional pageNummber and pageSize.
      tags:
        - Customers
      operationId: getCustomersV1
      # parameters in https://spec.openapis.org/oas/latest.html#path-item-object
      # parameter object https://spec.openapis.org/oas/latest.html#parameter-object
      parameters: # uses query parameters
        - $ref: "#/components/parameters/PageNumberParameter"
        - $ref: "#/components/parameters/PageSizeParameter"
      responses:
        '200':
          description: List of Customers
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerPagedList'
        '404':
          description: On no! We have no customers. This isn't Cheers.
    post:
      summary: Create new customer.
      description: Creates new Customer.
      tags:
        - Customers
      operationId: createCustomerV1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Customer"
      responses:
        '201':
          description: Customer created
          headers:
            Location:
              description: Location of created customer.
              schema:
                type: string
                format: uri
                example: https://example.com/customers/{assignedCustomerId}

        '401':
          description: Not authorized


  /v1/customers/{customerId}: # uses path variables
    get:
      summary: Get customer for given customer Id.
      description: Get Customer for requied customerId.
      tags:
        - Customers
      operationId: getCustomerByIdV1
      parameters:
        - name: customerId
          description: Customer Id
          in: path
          schema:
            type: string
            format: uuid
          required: true
      responses:
        '200':
          description: 'Found Customer for given customerId'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '400':
          description: Request body failed domain validation.
      #   '404':
      #    description: Customer not found.
  /v1/beers:
    get:
      summary: Get all beers.
      description: Get all Beers for optional pageNumber and pageSize.
      tags:
        - Beers
      operationId: getBeersV1
      parameters:
        - $ref: "#/components/parameters/PageNumberParameter"
        - $ref: "#/components/parameters/PageSizeParameter"
      responses:
        '200':
          description: List of Beers
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BeerPagedList'
        '404':
          description: Oh no! We're all out of beer! â˜¹
    post:
      summary: Create new beer.
      description: Creates new Beer.
      tags:
        - Beers
      operationId: createBeerV1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Beer'
      responses:
        '201':
          description: Beer created.
          headers:
            Location:
              description: Location of created beer.
              schema:
                type: string
                format: uri
                example: https://example.com/beers/{assignedBeerId}

  /v1/beers/{beerId}:
    get:
      summary: Get beer for given id.
      description: Get Beer for required beerId.
      tags:
        - Beers
      operationId: getBeerByIdV1
      parameters:
        - $ref: "#/components/parameters/BeerId"
      responses:
        '200':
          description: Beer for given beerId.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Beer"
  /v1/nachos:
    get:
      summary: Get some nachos.
      description: Get all the Nachos.
      tags:
        - Food
        - Deprecated
      operationId: getNachosV1
      deprecated: true
      responses:
        '404':
          description: We don't serve nachos anymore.
components:
  schemas:
    Address:
      type: object
      description: Address object
      properties:
        line1:
          type: string
          examples:
            - 123 Stone
        city:
          type: string
          examples:
            - Bedrock
        stateCode:
          type: string
          minLength: 2
          maxLength: 2
          description: Two letter state code
          enum:
            - MN
            - ND
            - SD
          default: MN
          examples:
            - MN
        zipcode:
          type: string
          pattern: '^\d{5}(?:[-]\d{4})?$'
          examples:
            - '90210-1234 or 90210'
    Beer:
      type: object
      description: Beer object
      properties:
        name:
          type: string
          examples:
            - Black Label
        style:
          enum:
            - ALE
            - PALE_ALE
            - IPA
            - WHEAT
            - LAGER
        upc:
          type: string
          pattern: '\d{13}'
          minLength: 13
          maxLength: 13
        price:
          type: number
          format: float
          examples:
            - 2.99
        quantity:
          type: integer
          format: int32
        brewery:
          $ref: '#/components/schemas/Brewery'
    BeerList:
      type: array
      minItems: 1
      maxItems: 10
      items:
        $ref: '#/components/schemas/Beer'
    BeerPagedList:
      type: object
      properties:
        content:
          $ref: '#/components/schemas/BeerList'
      allOf:
        # all properties from each schema listed here is inherited
        # there is no way to exclude a property
        - $ref: '#/components/schemas/PagedResponse'
    Brewery:
      type: object
      description: Brewery object
      properties:
        location:
          $ref: '#/components/schemas/Address'
        name:
          type: string
          minLength: 1
          maxLength: 25
          examples:
            - Hamm's
    Customer:
      type: object
      description: Customer object
      properties:
        id:
          type: string
          format: uuid
        firstName:
          type: string
          minLength: 1
          maxLength: 25
          examples:
            - Fred
        lastName:
          type: string
          minLength: 1
          maxLength: 25
          examples:
            - Flintstone
        address:
          $ref: '#/components/schemas/Address'
    CustomerList:
      type: array
      minItems: 1
      maxItems: 100
      items:
        $ref: '#/components/schemas/Customer'
    CustomerPagedList:
      type: object
      properties:
        content:
          $ref: '#/components/schemas/CustomerList'
      allOf:
        - $ref: '#/components/schemas/PagedResponse'
    PagedResponse:
      type: object
      properties:
        first:
          type: boolean
        last:
          type: boolean
        number:
          type: integer
          format: int32
        numberOfElements:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/PagedResponsePageable'
        size:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/PagedResponsePageableSort'
        totalElements:
          type: integer
          format: int32
        totalPages:
          type: integer
          format: int32
    PagedResponsePageableSort:
      type: object
      properties:
        sorted:
          type: boolean
        unsorted:
          type: boolean
    PagedResponsePageable:
      type: object
      properties:
        offset:
          type: integer
          format: int32
        pageNumber:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        paged:
          type: boolean
        unpaged:
          type: boolean
        sort:
          $ref: '#/components/schemas/PagedResponsePageableSort'
  parameters:
    BeerId:
      name: beerId
      in: path
      description: Beer Id
      schema:
        type: string
        format: uuid
      required: true
    PageNumberParameter:
      name: pageNumber
      in: query
      description: Page Number
      schema:
        type: integer
        format: int32
        default: 1
    PageSizeParameter:
      name: pageSize
      in: query
      description: Page Size
      schema:
        type: integer
        format: int32
        default: 25